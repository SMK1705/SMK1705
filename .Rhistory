mean_height=mean(health$Height)
mean_weigh=mean(health$Weight)
paste('mean of height',mean_weigh)
paste('mean of height',mean_height)
healthnew=health$Weight*2.205
healthnew=cbind(health,BWlb=healthnew)
healthnew
hist(healthnew$Weight)
hist(healthnew$BWlb)
hist(health$Height)
plot(healthnew$Height)
plot(healthnew$Height,healthnew$Weight)
A<-c(8,12,13,9,3)
B<-c(10,8,12,15,6,8,11)
am<-mean(A)
bm<-mean(B)
am
bm
z=(am-bm)/(3.28/sqrt(10))
z
z=(bm-am)/(3.28/sqrt(10))
z
A<-c(8,12,13,9,3)
B<-c(10,8,12,15,6,8,11)
am<-mean(A)
bm<-mean(B)
am
bm
z=(bm-am)/(3.28/sqrt(10))
z
a<-data.frame("hostel"=c(1,2,3))
a
a<-data.frame("C:\SMK\DA\R\Chi-square\Chi-square.csv")
a<-data.frame("C:\\SMK\\DA\\R\\Chi-square\\Chi-square.csv")
a
print(a)
print(a)
print(table(a))
a<-read.csv("C:\\SMK\\DA\\R\\Chi-square\\Chi-square.csv")
a
a.summary()
summary(a)
chisq.test(a)
a<-read.csv("C:\\SMK\\DA\\R\\Chi-square\\Chi-square.csv")
summary(a)
chisq.test(a)
test = c(170,167,174,179,183,179,156,163,156,187,156,174,167,156,170,183,179,174,170,159,187)
mean(test)
stdev= sd('test')
s<-sqrt(sum((test-mean(test))^2/(length(test)-1)))
s
dema <- c(rnorm('test', mean = 'mea', sd = 's'))
dema <- c(rnorm(170,167,174,179,183,179,156,163,156,187,156,174,167,156,170,183,179,174,170,159,187, mean = 170.90, sd = 10.39))
dema <- c(rnorm('170,167,174,179,183,179,156,163,156,187,156,174,167,156,170,183,179,174,170,159,187', mean = 170.90, sd = 10.39))
tes = c(170,167,174,179,183,179,156,163,156,187,156,174,167,156,170,183,179,174,170,159,187)
mea = mean(tes)
s<-sqrt(sum((tes-mean(tes))^2/(length(tes)-1)))
dema <- c(rnorm('tes', mean = 170.90, sd = 10.39))
dema <- c(rnorm(tes, mean = 170.90, sd = 10.39))
t.test(dema, mu = 170)
mea
tes = c(170,167,174,179,183,179,156,163,156,187,156,174,167,156,170,183,179,174,170,159,187)
mea = mean(tes)
sd<-sqrt(sum((tes-mean(tes))^2/(length(tes)-1)))
sd
mea
dema <- c(rnorm(tes, mean = 170.90, sd = 10.39))
t.test(dema, mu = 170)
tes = c(170,167,174,179,183,179,156,163,156,187,156,174,167,156,170,183,179,174,170,159,187)
mea = mean(tes)
s<-sqrt(sum((tes-mean(tes))^2/(length(tes)-1)))
s
mea
dema <- c(rnorm(tes, mean = mea, sd = s))
t.test(dema, mu = 170)
tes = c(170,167,174,179,179,189,179,183,179,156,163,156,187,156,167,156,174,170,183,179,174,170,179,159,187)
mea = mean(tes)
s<-sqrt(sum((tes-mean(tes))^2/(length(tes)-1)))
s
mea
dema <- c(rnorm(tes, mean = mea, sd = s))
t.test(dema, mu = 170)
df = read.csv("C:\\SMK\\DA\\R\\CA2\\poisons.csv")
head(df)
View(df)
class(df$poisson)
typeof(df$poisson)
str(df$poisson)
summary(df)
x = df$time
boxplot(x,col = "red", main = "Time" )
df = read.csv("C:\\SMK\\DA\\R\\CA2\\poisons.csv")
head(df)
View(df)
class(df$poisson)
typeof(df$poisson)
str(df$poisson)
summary(df)
x = df$time
boxplot(x,col = "red", main = "Time" )
response = c(t(as.matrix(df$time)))
response
response2 = response[1:12]
response2
f = c("A", "B", "C", "D")
k = 4
n = 3
x = gl(k, 1, n*k, factor(f))
x
av = aov(response2 ~ x)
summary(av)
av
df = read.csv("C:\\SMK\\DA\\R\\CA2\\poisons.csv")
head(df)
View(df)
class(df$poisson)
typeof(df$poisson)
str(df$poisson)
summary(df)
x = df$time
boxplot(x,col = "blue", main = "Time" )
response = c(t(as.matrix(df$time)))
response
response2 = response[1:12]
response2
f = c("A", "B", "C", "D")
k = 4
n = 3
x = gl(k, 1, n*k, factor(f))
x
av = aov(response2 ~ x)
summary(av)
av
df = read.csv("C:\\SMK\\DA\\R\\CA2\\poisons.csv")
head(df)
View(df)
class(df$poisson)
typeof(df$poisson)
str(df$poisson)
summary(df)
x = df$time
boxplot(x,col = "blue", main = "Time" )
response = c(t(as.matrix(df$time)))
response
response2 = response[1:12]
response2
f = c("A", "B", "C", "D")
k = 4
n = 3
x = gl(k, 1, n*k, factor(f))
x
av = aov(response2 ~ x)
summary(av)
av
darkstudio::activate()
darkstudio::activate()
darkstudio::activate()
git clone https://github.com/rileytwo/darkstudio
n = 395
df2 = data.frame("High School" = c(60,40,100), "Bachelors" = c(54,44,98), "Masters" = c(46,53,99), "Ph.D" = c(41,57,98),"Total" = c(201,194,395))
rownames(df2)= c("Female","Male","Total")
df2
chisq.test(df2)
install darkstudio()
remotes::install_github("rileytwo/darkstudio")
install_github("rileytwo/darkstudio")
install github("rileytwo/darkstudio")
remotes::install_github("rileytwo/darkstudio")
install_github("rileytwo/darkstudio")
install github()
install.packages("terra")
name <- LETTERS[1:10]
longitude <- c(-116.7, -120.4, -116.7, -113.5, -115.5,
-120.8, -119.5, -113.7, -113.7, -110.7)
latitude <- c(45.3, 42.6, 38.9, 42.1, 35.7, 38.9,
36.2, 39, 41.6, 36.9)
stations <- cbind(longitude, latitude)
# Simulated rainfall data
set.seed(0)
precip <- round((runif(length(latitude))*10)^3)
psize <- 1 + precip/500
plot(stations, cex=psize, pch=20, col='red', main='Precipitation')
# add names to plot
text(stations, name, pos=4)
# add a legend
breaks <- c(100, 250, 500, 1000)
legend.psize <- 1+breaks/500
legend("topright", legend=breaks, pch=20, pt.cex=legend.psize, col='red', bg='gray')
name <- LETTERS[1:10]
longitude <- c(-116.7, -120.4, -116.7, -113.5, -115.5,
-120.8, -119.5, -113.7, -113.7, -110.7)
latitude <- c(45.3, 42.6, 38.9, 42.1, 35.7, 38.9,
36.2, 39, 41.6, 36.9)
stations <- cbind(longitude, latitude)
# Simulated rainfall data
set.seed(0)
precip <- round((runif(length(latitude))*10)^3)
psize <- 1 + precip/500
plot(stations, cex=psize, pch=20, col='red', main='Precipitation')
# add names to plot
text(stations, name, pos=4)
# add a legend
breaks <- c(100, 250, 500, 1000)
legend.psize <- 1+breaks/500
legend("topright", legend=breaks, pch=20, pt.cex=legend.psize, col='red', bg='gray')
name <- LETTERS[1:10]
longitude <- c(-116.7, -120.4, -116.7, -113.5, -115.5,
-120.8, -119.5, -113.7, -113.7, -110.7)
latitude <- c(45.3, 42.6, 38.9, 42.1, 35.7, 38.9,
36.2, 39, 41.6, 36.9)
stations <- cbind(longitude, latitude)
# Simulated rainfall data
set.seed(0)
precip <- round((runif(length(latitude))*10)^3)
psize <- 1 + precip/500
plot(stations, cex=psize, pch=20, col='red', main='Precipitation')
# add names to plot
text(stations, name, pos=4)
# add a legend
breaks <- c(100, 250, 500, 1000)
legend.psize <- 1+breaks/500
legend("topright", legend=breaks, pch=20, pt.cex=legend.psize, col='red', bg='gray')
lon <- c(-116.8, -114.2, -112.9, -111.9, -114.2, -115.4, -117.7)
lat <- c(41.3, 42.9, 42.4, 39.8, 37.6, 38.3, 37.6)
x <- cbind(lon, lat)
plot(stations, main='Precipitation')
polygon(x, col='blue', border='light blue')
lines(stations, lwd=3, col='red')
points(x, cex=2, pch=20)
points(stations, cex=psize, pch=20, col='red', main='Precipitation')
lon <- c(-116.8, -114.2, -112.9, -111.9, -114.2, -115.4, -117.7)
lat <- c(41.3, 42.9, 42.4, 39.8, 37.6, 38.3, 37.6)
x <- cbind(lon, lat)
plot(stations, main='Precipitation')
polygon(x, col='blue', border='light blue')
lines(stations, lwd=3, col='red')
points(x, cex=2, pch=20)
points(stations, cex=psize, pch=20, col='red', main='Precipitation')
legend.psize <- 1+breaks/500
legend("topright", legend=breaks, pch=20, pt.cex=legend.psize, col='red', bg='gray')
wst <- data.frame(longitude, latitude, name, precip)
wst
lon <- c(-116.8, -114.2, -112.9, -111.9, -114.2, -115.4, -117.7)
lat <- c(41.3, 42.9, 42.4, 39.8, 37.6, 38.3, 37.6)
lonlat <- cbind(id=1, part=1, lon, lat)
lonlat
lns <- vect(lonlat, type="lines", crs=crdref)
lon <- c(-116.8, -114.2, -112.9, -111.9, -114.2, -115.4, -117.7)
lat <- c(41.3, 42.9, 42.4, 39.8, 37.6, 38.3, 37.6)
lonlat <- cbind(id=1, part=1, lon, lat)
lonlat
lns <- vect(lonlat, type="lines", crs=crdref)
data = read.csv("C:\\SMK\\DA\\R\\Project\\TITAN-EQ-29-12-2020-to-28-12-2022.csv.xls")
data
View(data)
str(data)
# data$OPEN = as.numeric(gsub(",","",as.character(data$OPEN)))
for (x in 2:11) {
data[,x] = as.numeric(gsub(",","",data[,x]))
}
data
View(data)
View(data)
str(data)
data = read.csv("C:\\SMK\\DA\\R\\Project\\TITAN-EQ-29-12-2020-to-28-12-2022.csv.xls")
data
View(data)
data$Date=as.Date(data$Date,format = "%d-%m-%y")
# data[,2:11] = as.numeric(gsub(",","",as.character(data[,2:11])))
summary(data)
str(data)
data = read.csv("C:\\SMK\\DA\\R\\Project\\TITAN-EQ-29-12-2020-to-28-12-2022.csv.xls")
data
data$Date=as.Date(data$Date,format = "%d-%m-%y")
# data[,2:11] = as.numeric(gsub(",","",as.character(data[,2:11])))
summary(data)
str(data)
for (x in 2:11) {
data[,x] = as.numeric(gsub(",","",data[,x]))
}
data = read.csv("C:\\SMK\\DA\\R\\Project\\TITAN-EQ-29-12-2020-to-28-12-2022.csv.xls")
data
for (x in 2:11) {
data[,x] = as.numeric(gsub(",","",data[,x]))
}
View(data)
head(data)
summary(data)
str(data)
for (x in 2:11) {
data[,x] = as.numeric(gsub(",","",data[,x]))
}
View(data)
data = read.csv("C:\\SMK\\DA\\R\\Project\\Titan.csv")
data
View(data)
for (x in 2:11) {
data[,x] = as.numeric(gsub(",","",data[,x]))
}
data$Date=as.Date(data$Date,format = "%d-%m-%y")
summary(data)
str(data)
data$Date=as.Date(data$Date)
data = read.csv("C:\\SMK\\DA\\R\\Project\\Titan.csv")
data
data$Date=as.Date(data$Date)
install.packages(anytime)
install.packages("anytime")
library(anytime)
data$Date=anydate(data$Date)
View(data)
summary(data)
for (x in 2:11) {
data[,x] = as.numeric(gsub(",","",data[,x]))
}
summary(data)
str(data)
help("tsclean")
help("dplyr")
library("dplyr")
help("dplyr")
help("tsclean")
ls("dplyr")
ls("tseries")
library("tseries")
library("tseries")
library('tseries')
library("forecast")
install.packages("forecast")
library("forecast")
help("forecast")
help("tsclean")
seq(as.Date("2012-08-13"), as.Date("2017-08-11"), by = "day")
View(seq(as.Date("2012-08-13"), as.Date("2017-08-11"), by = "day"))
seq(as.Date("2012-08-13"), as.Date("2017-08-11"), by = "day")
ts(start = c(2012, as.numeric(format(inds[1], "%j"))),
frequency = 365.5)
inds <- seq(as.Date("2012-08-13"), as.Date("2017-08-11"), by = "day")
ts(start = c(2012, as.numeric(format(inds[1], "%j"))),
frequency = 365.5)
help("ts")
library(anytime)
library(dplyr)
library(forecast)
data = read.csv("C:\\SMK\\DA\\R\\Project\\Titan.csv")
data
View(data)
head(data)
summary(data)
str(data)
for (x in 2:11) {
data[,x] = as.numeric(gsub(",","",data[,x]))
}
data$Date=anydate(data$Date)
summary(data)
str(data)
inds <- seq(as.Date("2021-08-13"), as.Date("2022-12-26"), by = "day")
as.numeric(data[,3]) %>%
tsclean(replace.missing = TRUE, lambda = NULL) %>%
ts(start = c(2022, as.numeric(format(inds[1], "%j"))),
frequency = 365.5)
b=xts(data[,2:11],order.by = data[,1])
View(b)
library(xts)
View(b)
b=xts(data[,2:11],order.by = data[,1])
View(b)
library(anytime)
library(dplyr)
library(forecast)
library(xts)
library(timeSeries)
library(tseries)
library(quantmod)
data = read.csv("C:\\SMK\\DA\\R\\Project\\Titan.csv")
data
View(data)
head(data)
summary(data)
str(data)
for (x in 2:11) {
data[,x] = as.numeric(gsub(",","",data[,x]))
}
# data[,2:11] = as.numeric(gsub(",","",as.character(data[,2:11])))
data$Date=anydate(data$Date)
summary(data)
str(data)
b=xts(data[,2:11],order.by = data[,1]) # converting to time series object
h=xts(data[,3],order.by = data[,1]) # converting to time series object
plot(h)
class(h)
par(mfrow = c(1,2))
Acf(h, main="ACF")
Pacf(h, main="Pacf")
print(adf.test(h))
auto.arima(h, seasonal = FALSE)
fitA = auto.arima(h,seasonal = FALSE)
tsdisplay(residuals(fitA), lag.max = 40, main = "res")
fcast1 = forecast(fitA)
plot(fcast1)
#inds <- seq(as.Date("2021-08-13"), as.Date("2022-12-26"), by = "day")
fcast1
plot(h)
data = read.csv("C:\\SMK\\DA\\R\\Project\\tcs.csv")
View(data)
for (x in 3:14) {
data[,x] = as.numeric(gsub(",","",data[,x]))
}
data$Date=anydate(data$Date)
str(data)
data$Date=anydate(data$Date.)
str(data)
data$Date.=anydate(data$Date.)
str(data)
h=xts(data$HIGH.,order.by = data$Date.) # converting to time series object
plot(h)
View(h)
str(h)
par(mfrow = c(1,2))
Acf(h, main="ACF")
Pacf(h, main="Pacf")
auto.arima(h, seasonal = FALSE)
fitA = auto.arima(h,seasonal = FALSE)
tsdisplay(residuals(fitA), lag.max = 40, main = "res")
fcast1 = forecast(fitA)
plot(fcast1)
fcast1
Acf(h, main="ACF")
acf(h)
print(acf(h))
mean(h)
h=xts(data$close.,order.by = data$Date.) # converting to time series object
par(mfrow = c(1,2))
Acf(h, main="ACF")
Pacf(h, main="Pacf")
print(adf.test(h))
auto.arima(h, seasonal = FALSE)
fitA = auto.arima(h,seasonal = FALSE)
tsdisplay(residuals(fitA), lag.max = 40, main = "res")
fcast1 = forecast(fitA)
plot(fcast1)
fcast1
install.packages(tidyquant)
library(tidyquant)
install.packages("tidyquant")
install.packages("tidyquant")
install.packages("tidyquant")
install.packages("tidyquant")
library(tidyquant)
library(tidyquant)
stock_list <- tibble(stock = c(h))
stock_list <- tibble(stock = c("h"))
stock_list <- tibble(stock = h)
stock_list <- tibble::add_column(stock = c("h"))
stock_list <- tibble::add_column(h = c("h"))
stocks <- as.xts(data.frame(tcsdat = tcs$"tcs.close."))
stocks <- as.xts(data.frame(tcsdat = data$"data.close."))
stocks
View(data)
tcsdat
stocks <- as.xts(data.frame(tcsdat = data$close.))
stocks <- data.frame(data$close.)
tcsdat
stocks
stock_list <- tibble(stock = stocks)
stock_list <- tibble(stock = c("stocks"))
fcast1
getSymbols(Symbols = "data")
getSymbols(Symbols = data)
getSymbols(Symbols ="C:\\SMK\\DA\\R\\Project\\tcs.csv")
class(data)
stocks <- data.frame(data$close.)
stocks
stock_list <- tibble(stock = c("stocks"))
stock_list <- tibble(stock = stocks)
install.packages("shiny")
library(shiny); runApp('C:/SMK/DA/R/Project/uipage.r')
runApp('C:/SMK/DA/R/Project/uipage.r')
library(shiny)
runApp('C:/SMK/DA/R/Project/uipage.r')
runApp('C:/SMK/DA/R/Project/uipage.r')
runApp('C:/SMK/DA/R/Project/uipage.r')
runApp('C:/SMK/DA/R/Project/uipage.r')
runApp('C:/SMK/DA/R/Project/uipage.r')
runApp('C:/SMK/DA/R/Project/uipage.r')
runApp('C:/SMK/DA/R/Project/uipage.r')
runApp('C:/SMK/DA/R/Project/uipage.r')
runApp('C:/SMK/DA/R/Project/uipage.r')
runApp('C:/SMK/DA/R/Project/uipage.r')
runApp('C:/SMK/DA/R/Project/uipage.r')
runApp('C:/SMK/DA/R/Project/uipage.r')
runApp('C:/SMK/DA/R/Project/uipage.r')
View(data)
runApp('C:/SMK/DA/R/Project/uipage.r')
runApp('C:/SMK/DA/R/Project/uipage.r')
runApp('C:/SMK/DA/R/Project/uipage.r')
runApp('C:/SMK/DA/R/Project/uipage.r')
runApp('C:/SMK/DA/R/Project/uipage.r')
runApp('C:/SMK/DA/R/Project/uipage.r')
runApp('C:/SMK/DA/R/Project/uipage.r')
library(shiny); runApp('C:/SMK/DA/R/Project/finaluipage.r')
install.packages(‘RServe’)
install.packages("RServe")
install.packages("RServe")
library(RServe)
library(shiny); runApp('C:/SMK/DA/R/Project/finaluipage.r')
runApp('C:/SMK/DA/R/Project/finaluipage.r')
library(shiny); runApp('C:/SMK/DA/R/Project/finaluipage.r')
runApp('C:/SMK/DA/R/Project/finaluipage.r')
runApp('C:/SMK/DA/R/Project/finaluipage.r')
runApp('C:/SMK/DA/R/Project/finaluipage.r')
runApp('C:/SMK/DA/R/Project/finaluipage.r')
